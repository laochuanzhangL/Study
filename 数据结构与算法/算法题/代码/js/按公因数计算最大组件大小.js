//头铁版本
// Array.prototype.delete = function (val) {
//   var index = this.indexOf(val)
//   if (index > -1) {
//     this.splice(index, 1)
//   }
// }
// var judge = function (a, b) {
//   let min = Math.min(a, b)
//   for (let i = 2; i <= min; i++) {
//     if (a % i == 0 && b % i == 0) return true
//   }
//   return false
// }
// var arrJudge = function (a, b) {
//   let lena = a.length,
//     lenb = b.length
//   for (let i = 0; i < lena; i++) {
//     for (let j = 0; j < lenb; j++) {
//       if (judge(a[i], b[j])) return true
//     }
//   }
//   return false
// }
// var oneArrJude = function (arr) {
//   for (let i = 0; i < arr.length - 1; i++) {
//     if (judge(arr[i], arr[i + 1])) {
//       return false
//     }
//   }
//   return true
// }
// var largestComponentSize = function (nums) {
//   if (nums.includes(1)) nums.delete(1)
//   let result = 0,
//     max = 1,
//     tips = 0,
//     temp = true
//   let arr = []
//   while (true) {
//     arr.push(nums[0])
//     nums.delete(nums[0])
//     while (arrJudge(nums, arr) && temp) {
//       let i = 0
//       for (i; i < nums.length; i++) {
//         for (let j = tips; j < arr.length; j++) {
//           if (judge(nums[i], arr[j])) {
//             if (!arr.includes(nums[i])) {
//               arr.push(nums[i])
//               nums.delete(nums[i])
//               max++
//             }
//           }
//         }
//       }
//     }
//     result = Math.max(result, max)
//     if (max == 1 && oneArrJude(nums)) return result
//     tips = arr.length
//     max = 1
//   }
// }
// nums = [
//   2048, 4097, 6146, 6486, 7, 10, 6155, 2061, 16, 4113, 6163, 2068, 2069, 24,
//   2073, 26, 29, 5125, 34, 6180, 8230, 40, 6185, 6187, 6190, 9617, 4151, 2104,
//   2107, 4158, 5813, 64, 8257, 6212, 8262, 9004, 8265, 2122, 4174, 4177, 6499,
//   4180, 88, 89, 6235, 8286, 4191, 96, 4195, 2049, 2150, 2153, 5459, 6252, 4116,
//   8321, 3465, 8328, 5129, 8332, 8335, 8338, 8342, 6296, 153, 4250, 8348, 4255,
//   2210, 619, 2212, 8357, 2215, 8360, 8361, 711, 173, 8904, 182, 8375, 6329,
//   4282, 6333, 190, 4287, 4291, 4293, 2247, 200, 6349, 2254, 4306, 4576, 2266,
//   4316, 2269, 2271, 6369, 4323, 6182, 230, 4328, 6381, 238, 2288, 8915, 4340,
//   9419, 4345, 4347, 256, 2091, 8456, 266, 2315, 6413, 4366, 1100, 8467, 46,
//   8471, 7556, 6427, 4382, 6431, 2336, 2338, 6436, 6437, 6438, 3121, 2346, 8491,
//   8499, 2357, 4406, 9609, 6456, 313, 6462, 2367, 8512, 8514, 4419, 2374, 2103,
//   8525, 4430, 8529, 1763, 8532, 4438, 2391, 8538, 2395, 350, 8544, 354, 4451,
//   4453, 4454, 2407, 8552, 6506, 8555, 4460, 6509, 2417, 2421, 2422, 375, 4473,
//   4477, 8574, 6549, 4482, 4483, 8580, 4486, 3137, 2442, 8587, 6541, 9965, 400,
//   2449, 6546, 1091, 405, 4502, 408, 8260, 6555, 4509, 2468, 421, 8614, 6629,
//   6573, 6574, 4528, 2803, 6580, 3145, 756, 2538, 452, 2129, 455, 6138, 2505,
//   2509, 6606, 463, 8656, 467, 220, 471, 474, 6619, 477, 4574, 2528, 6625, 4578,
//   4518, 4583, 1380, 4586, 4588, 7250, 8686, 496, 221, 5886, 5546, 4606, 4607,
//   5888, 6659, 699, 4614, 4616, 6667, 6668, 2574, 2575, 8280, 3973, 2585, 540,
//   8733, 2591, 2480, 399, 6694, 554, 8754, 8755, 567, 2617, 4667, 6922, 6719,
//   577, 4876, 4683, 8781, 8885, 4695, 8793, 7951, 2652, 9772, 8803, 6756, 6757,
//   2663, 4712, 2665, 8810, 4715, 2672, 628, 4725, 630, 631, 8825, 637, 8831, 641,
//   8835, 644, 646, 108, 2698, 6795, 4751, 656, 792, 658, 8852, 3866, 674, 675,
//   2341, 683, 8876, 4783, 6834, 692, 6942, 6838, 695, 6483, 6943, 700, 6845,
//   3092, 6848, 5579, 8900, 801, 712, 2761, 6775, 6861, 6863, 4817, 1456, 4821,
//   5957, 9337, 730, 4827, 8925, 6878, 2784, 8933, 8938, 8940, 2797, 750, 752,
//   808, 1491, 4852, 4859, 6908, 2858, 2685, 2818, 4867, 9686, 4663, 778, 6924,
//   4877, 8978, 8984, 8986, 8987, 1583, 8990, 4895, 6944, 8993, 2850, 803, 6950,
//   4904, 9002, 6955, 777, 814, 4911, 6960, 7304, 9010, 9011, 6964, 9013, 6974,
//   831, 9025, 9028, 4933, 9031, 6984, 2889, 9034, 1460, 1801, 9037, 2895, 2898,
//   9043, 4948, 4949, 4950, 4954, 9055, 7008, 2915, 2917, 4966, 9063, 2920, 4971,
//   2924, 9073, 4979, 4981, 489, 4985, 7036, 893, 895, 7804, 898, 2947, 900, 902,
//   904, 5002, 5003, 908, 7053, 2959, 912, 2962, 3566, 7064, 2972, 9117, 927,
//   2976, 2977, 931, 7076, 2981, 9133, 7325, 7088, 9141, 5050, 5053, 6033, 3011,
//   9156, 8761, 3019, 5897, 973, 7119, 7121, 7122, 9648, 7125, 7128, 5090, 7675,
//   5092, 3046, 1000, 1002, 9195, 5103, 1010, 6995, 5108, 3061, 7158, 5113, 9213,
//   9218, 1028, 854, 3078, 513, 3081, 9230, 3089, 5138, 3091, 1044, 1047, 3101,
//   3103, 3105, 1059, 5157, 1062, 1201, 7208, 7605, 520, 3122, 9737, 3128, 1082,
//   3132, 7230, 9279, 7233, 9283, 7237, 3143, 9289, 9290, 2231, 5196, 1103, 3153,
//   9298, 867, 9300, 7255, 5208, 8719, 6330, 7263, 1120, 7267, 3174, 1128, 5226,
//   1131, 9324, 3183, 9331, 5236, 7285, 9336, 5241, 5971, 1215, 5903, 5251, 3205,
//   1160, 5996, 2258, 9361, 3220, 1902, 3224, 5273, 5274, 1181, 1182, 7328, 5282,
//   244, 3240, 3244, 1197, 3249, 9516, 7027, 7349, 3109, 3262, 9407, 1217, 5323,
//   3269, 1223, 5320, 1225, 518, 8055, 9420, 1229, 3281, 5332, 9429, 3286, 1239,
//   7386, 3291, 7388, 1246, 7392, 9442, 3299, 7396, 9449, 9450, 3308, 1261, 9454,
//   1267, 3316, 7416, 7419, 5372, 7381, 9999, 1283, 7428, 9430, 3335, 5385, 5389,
//   3344, 5393, 7442, 5396, 4523, 3351, 3352, 7451, 5404, 1925, 1312, 1584, 3363,
//   1319, 1321, 1322, 1323, 3372, 5421, 2840, 3375, 5000, 9526, 9527, 9528, 9529,
//   5436, 5438, 9536, 1345, 9539, 9540, 9782, 7494, 8759, 9549, 3406, 9555, 7509,
//   7511, 5469, 7518, 5472, 3425, 3428, 8081, 5483, 1751, 1391, 9586, 3443, 3444,
//   1398, 3388, 5496, 183, 5502, 1407, 5504, 3457, 5508, 6721, 7561, 7685, 5912,
//   4333, 3472, 2968, 5525, 1275, 3480, 3483, 7584, 3490, 3491, 7588, 8436, 7591,

// ]
// console.log(largestComponentSize(nums))

//官网
class UnionFind {
  constructor() {
    this.parents = new Map()
    this.sizes = new Map()
  }
  find(x) {
    if (x !== (this.parents.get(x) ?? x)) {
      //如果当前x有父亲的话进行以下操作
      this.parents.set(x, this.find(this.parents.get(x) ?? x)) //如果有父亲，将其父亲更改为其父亲的父亲，若不存在，就设置为当前的父亲
    }
    return this.parents.get(x) ?? x //有父亲返回父亲，无责返回其本身
  }
  union(a, b) {
    let fa = this.find(a)
    let fb = this.find(b)
    if (fa == fb) return //如果两个值父亲相同，则退出，用合并
    let sa = this.sizes.get(fa) ?? 1 //获取当前以此值为父亲的元素个数，若不存在则设为1
    let sb = this.sizes.get(fb) ?? 1

    //将sa和sb合并到其拥有子女最多的那个元素，若sa子女多，则让sb认其为父，并且让子女数相加
    if (sa < sb) {
      this.parents.set(fb, fa)
      this.sizes.set(fb, sb + sa)
    } else {
      this.parents.set(fa, fb)
      this.sizes.set(fa, sa + sb)
    }
  }
}
function largestComponentSize(nums) {
  const uf = new UnionFind()
  for (let n of nums) {
    let temp = n
    for (let i = 2; i <= n / i; i++) {
      //找出n所有的质因数，将质因数作为其子
      let flag = false
      while (n % i === 0) {
        n /= i
        flag = true
      }
      if (flag) uf.union(temp, i)
    }
    if (n > 1) uf.union(temp, n) //将n的质因数求到了最后一个质数后让其也认n为父
  }
  let count = new Map()
  let res = 0
  for (let i of nums) {
    let p = uf.find(i)
    count.set(p, (count.get(p) ?? 0) + 1) //遍历每个元素的最终祖先，找到最终祖先后让其个数+1
    res = Math.max(res, count.get(p) ?? 0)
  }
  return res
}

nums = [
  2048, 4097, 6146, 6486, 7, 10, 6155, 2061, 16, 4113, 6163, 2068, 2069, 24,
  2073, 26, 29, 5125, 34, 6180, 8230, 40, 6185, 6187, 6190, 9617, 4151, 2104,
  2107, 4158, 5813, 64, 8257, 6212, 8262, 9004, 8265, 2122, 4174, 4177, 6499,
  4180, 88, 89, 6235, 8286, 4191, 96, 4195, 2049, 2150, 2153, 5459, 6252, 4116,
  8321, 3465, 8328, 5129, 8332, 8335, 8338, 8342, 6296, 153, 4250, 8348, 4255,
  2210, 619, 2212, 8357, 2215, 8360, 8361, 711, 173, 8904, 182, 8375, 6329,
  4282, 6333, 190, 4287, 4291, 4293, 2247, 200, 6349, 2254, 4306, 4576, 2266,
  4316, 2269, 2271, 6369, 4323, 6182, 230, 4328, 6381, 238, 2288, 8915, 4340,
  9419, 4345, 4347, 256, 2091, 8456, 266, 2315, 6413, 4366, 1100, 8467, 46,
  8471, 7556, 6427, 4382, 6431, 2336, 2338, 6436, 6437, 6438, 3121, 2346, 8491,
  8499, 2357, 4406, 9609, 6456, 313, 6462, 2367, 8512, 8514, 4419, 2374, 2103,
  8525, 4430, 8529, 1763, 8532, 4438, 2391, 8538, 2395, 350, 8544, 354, 4451,
  4453, 4454, 2407, 8552, 6506, 8555, 4460, 6509, 2417, 2421, 2422, 375, 4473,
  4477, 8574, 6549, 4482, 4483, 8580, 4486, 3137, 2442, 8587, 6541, 9965, 400,
  2449, 6546, 1091, 405, 4502, 408, 8260, 6555, 4509, 2468, 421, 8614, 6629,
  6573, 6574, 4528, 2803, 6580, 3145, 756, 2538, 452, 2129, 455, 6138, 2505,
  2509, 6606, 463, 8656, 467, 220, 471, 474, 6619, 477, 4574, 2528, 6625, 4578,
  4518, 4583, 1380, 4586, 4588, 7250, 8686, 496, 221, 5886, 5546, 4606, 4607,
  5888, 6659, 699, 4614, 4616, 6667, 6668, 2574, 2575, 8280, 3973, 2585, 540,
  8733, 2591, 2480, 399, 6694, 554, 8754, 8755, 567, 2617, 4667, 6922, 6719,
  577, 4876, 4683, 8781, 8885, 4695, 8793, 7951, 2652, 9772, 8803, 6756, 6757,
  2663, 4712, 2665, 8810, 4715, 2672, 628, 4725, 630, 631, 8825, 637, 8831, 641,
  8835, 644, 646, 108, 2698, 6795, 4751, 656, 792, 658, 8852, 3866, 674, 675,
  2341, 683, 8876, 4783, 6834, 692, 6942, 6838, 695, 6483, 6943, 700, 6845,
  3092, 6848, 5579, 8900, 801, 712, 2761, 6775, 6861, 6863, 4817, 1456, 4821,
  5957, 9337, 730, 4827, 8925, 6878, 2784, 8933, 8938, 8940, 2797, 750, 752,
  808, 1491, 4852, 4859, 6908, 2858, 2685, 2818, 4867, 9686, 4663, 778, 6924,
  4877, 8978, 8984, 8986, 8987, 1583, 8990, 4895, 6944, 8993, 2850, 803, 6950,
  4904, 9002, 6955, 777, 814, 4911, 6960, 7304, 9010, 9011, 6964, 9013, 6974,
  831, 9025, 9028, 4933, 9031, 6984, 2889, 9034, 1460, 1801, 9037, 2895, 2898,
  9043, 4948, 4949, 4950, 4954, 9055, 7008, 2915, 2917, 4966, 9063, 2920, 4971,
  2924, 9073, 4979, 4981, 489, 4985, 7036, 893, 895, 7804, 898, 2947, 900, 902,
  904, 5002, 5003, 908, 7053, 2959, 912, 2962, 3566, 7064, 2972, 9117, 927,
  2976, 2977, 931, 7076, 2981, 9133, 7325, 7088, 9141, 5050, 5053, 6033, 3011,
  9156, 8761, 3019, 5897, 973, 7119, 7121, 7122, 9648, 7125, 7128, 5090, 7675,
  5092, 3046, 1000, 1002, 9195, 5103, 1010, 6995, 5108, 3061, 7158, 5113, 9213,
  9218, 1028, 854, 3078, 513, 3081, 9230, 3089, 5138, 3091, 1044, 1047, 3101,
  3103, 3105, 1059, 5157, 1062, 1201, 7208, 7605, 520, 3122, 9737, 3128, 1082,
  3132, 7230, 9279, 7233, 9283, 7237, 3143, 9289, 9290, 2231, 5196, 1103, 3153,
  9298, 867, 9300, 7255, 5208, 8719, 6330, 7263, 1120, 7267, 3174, 1128, 5226,
  1131, 9324, 3183, 9331, 5236, 7285, 9336, 5241, 5971, 1215, 5903, 5251, 3205,
  1160, 5996, 2258, 9361, 3220, 1902, 3224, 5273, 5274, 1181, 1182, 7328, 5282,
  244, 3240, 3244, 1197, 3249, 9516, 7027, 7349, 3109, 3262, 9407, 1217, 5323,
  3269, 1223, 5320, 1225, 518, 8055, 9420, 1229, 3281, 5332, 9429, 3286, 1239,
  7386, 3291, 7388, 1246, 7392, 9442, 3299, 7396, 9449, 9450, 3308, 1261, 9454,
  1267, 3316, 7416, 7419, 5372, 7381, 9999, 1283, 7428, 9430, 3335, 5385, 5389,
  3344, 5393, 7442, 5396, 4523, 3351, 3352, 7451, 5404, 1925, 1312, 1584, 3363,
  1319, 1321, 1322, 1323, 3372, 5421, 2840, 3375, 5000, 9526, 9527, 9528, 9529,
  5436, 5438, 9536, 1345, 9539, 9540, 9782, 7494, 8759, 9549, 3406, 9555, 7509,
  7511, 5469, 7518, 5472, 3425, 3428, 8081, 5483, 1751, 1391, 9586, 3443, 3444,
  1398, 3388, 5496, 183, 5502, 1407, 5504, 3457, 5508, 6721, 7561, 7685, 5912,
  4333, 3472, 2968, 5525, 1275, 3480, 3483, 7584, 3490, 3491, 7588, 8436, 7591,
]
console.log(largestComponentSize(nums))
